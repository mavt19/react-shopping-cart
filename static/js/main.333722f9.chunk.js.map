{"version":3,"sources":["components/Todo/Shopping/CartItem.jsx","components/Todo/Shopping/Cart.jsx","components/Todo/Shopping/App.jsx","serviceWorker.js","index.js"],"names":["CartItem","props","id","name","price","qty","updateQty","className","onClick","disabled","Cart","initialState","JSON","parse","window","localStorage","getItem","initialItems","useState","items","setItems","count","setCount","useEffect","setItem","stringify","newQty","newItems","map","item","garntTotal","reduce","total","toFixed","key","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gRA4BeA,EA1BE,SAACC,GAAU,IAEjBC,EAAmCD,EAAnCC,GAAIC,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,MAAOC,EAAkBJ,EAAlBI,IAAKC,EAAaL,EAAbK,UAS7B,OAEI,yBAAKC,UAAU,YACX,6BAAMJ,GACN,iCAAOC,GACP,6BACA,4BAAQI,QATE,WACdF,EAAUJ,EAAGG,EAAI,IAQeI,SAAUJ,EAAI,GAA1C,KACCA,EACD,4BAAQG,QAfD,WACXF,EAAUJ,EAAIG,EAAI,KAcd,MAEA,uCAAaA,EAAID,KCmBdM,EAvCF,SAACT,GACV,IAAMU,EAAeC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,UACrDC,EAAgBhB,EAAhBgB,aAFa,EAGMC,mBAASP,GAAgBM,GAH/B,mBAGbE,EAHa,KAGNC,EAHM,OAIMF,mBAAS,GAJf,mBAIbG,EAJa,KAINC,EAJM,KAKpBC,qBAAU,WACPT,OAAOC,aAAaS,QAAQ,QAAQZ,KAAKa,UAAUN,MACnD,CAACA,IAIJ,IAAMb,EAAY,SAACJ,EAAIwB,GACnB,IAAMC,EAAWR,EAAMS,KAAI,SAAAC,GACvB,OAAGA,EAAK3B,KAAOA,EACJ,2BAAI2B,GAAX,IAAiBxB,IAAKqB,IAEnBG,KAEXT,EAASO,IAGPG,EAAaX,EAAMY,QAAO,SAACC,EAAOH,GAAR,OAC3BG,EAAMH,EAAKxB,IAAMwB,EAAKzB,QACzB,GAAG6B,QAAQ,GAEb,OACI,yBAAK1B,UAAU,QACf,4BAAQC,QAAS,kBAAKc,EAASD,EAAM,KAAKA,GACtC,wBAAId,UAAU,cAAd,kBACA,yBAAKA,UAAU,cACdY,EAAMS,KAAI,SAAAC,GAAI,OACX,kBAAC,EAAD,iBAAcA,EAAd,CAAoBK,IAAKL,EAAK3B,GAAII,UAAWA,SAG7C,wBAAIC,UAAU,cAAd,iBAA0CuB,KClCpDX,G,MAAO,CACT,CAACjB,GAAI,EAAGC,KAAM,iBAAkBC,MAAO,KAAMC,IAAK,GAClD,CAACH,GAAI,EAAGC,KAAM,cAAeC,MAAO,KAAMC,IAAK,GAC/C,CAACH,GAAI,EAAGC,KAAM,aAAcC,MAAO,IAAMC,IAAK,KASnC8B,EAPH,WACR,OAAQ,yBAAK5B,UAAU,QACf,kBAAC,EAAD,CAAMU,aAAcE,MCEZiB,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2D,UCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.333722f9.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst CartItem = (props) =>{\r\n\r\n    const {id, name, price, qty, updateQty} = props\r\n\r\n    const addOne = () =>{\r\n        updateQty(id, qty+1)\r\n    }\r\n\r\n    const removeOne = () =>{\r\n        updateQty(id,qty-1)\r\n    }\r\n    return(\r\n\r\n        <div className=\"CartItem\" >\r\n            <div>{name}</div>\r\n            <div>${price}</div>\r\n            <div>\r\n            <button onClick={removeOne} disabled={qty<1}>-</button>\r\n            {qty}\r\n            <button onClick={addOne}>+</button>\r\n            </div>\r\n            <div>Total: {qty*price}</div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default CartItem","import React, { useState, useEffect } from 'react'\r\nimport CartItem from './CartItem'\r\n\r\nconst Cart = (props) => {\r\n    const initialState = JSON.parse(window.localStorage.getItem('items'))\r\n    const {initialItems} = props\r\n    const [items, setItems] = useState(initialState || initialItems)\r\n    const [count, setCount] = useState(1)\r\n    useEffect(() => {\r\n       window.localStorage.setItem('items',JSON.stringify(items))\r\n    }, [items])\r\n\r\n\r\n\r\n    const updateQty = (id, newQty) =>{\r\n        const newItems = items.map(item=>{\r\n            if(item.id === id){\r\n                return {...item, qty: newQty }\r\n            }\r\n            return item\r\n        })\r\n        setItems(newItems)\r\n    }\r\n    \r\n    const garntTotal = items.reduce((total, item)=>(\r\n         total+item.qty * item.price\r\n    ),0).toFixed(2)\r\n\r\n    return (\r\n        <div className=\"Cart\">\r\n        <button onClick={()=> setCount(count+1)}>{count}</button>\r\n            <h1 className=\"Cart-title\">Shopping Cart </h1>\r\n            <div className=\"Cart-items\">\r\n            {items.map(item=>(\r\n                <CartItem {...item} key={item.id} updateQty={updateQty}/>\r\n            ))}\r\n            </div>\r\n                <h2 className=\"Cart-total\">Grant Total : {garntTotal}</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n\r\n\r\n","import React from 'react'\r\nimport Cart from './Cart'\r\nimport '../../../assets/css/Cart.css'\r\nconst items =[\r\n    {id: 1, name: 'Taco Seasoning', price: 2.25, qty: 2},\r\n    {id: 2, name: 'Pinto Beans', price: 1.99, qty: 3},\r\n    {id: 3, name: 'Sour Cream', price: 3.50, qty: 1},\r\n]\r\nconst App = () => {\r\n    return (<div className=\"cart\">\r\n            <Cart initialItems={items}/>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/Todo/Shopping/App';\n\nimport * as serviceWorker from './serviceWorker';\nimport Todos from './components/Todo/Todos';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}